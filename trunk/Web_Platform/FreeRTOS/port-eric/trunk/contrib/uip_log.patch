Index: src/uip/uip_task.c
===================================================================
--- src/uip/uip_task.c	(revision 612)
+++ src/uip/uip_task.c	(working copy)
@@ -61,25 +60,25 @@
   	timer_set(&arp_timer, CLOCK_SECOND * 10);
 
  	dmaSemaphore = nic_init(); 
-    uip_log("nic init\n");
+    uip_log("nic init");
 
     // init uIP
     uip_init();
-    uip_log("uip init\n");
+    uip_log("uip init");
 
     // init ARP cache
    	uip_arp_init();
-   	uip_log("arp init\n");
+   	uip_log("arp init");
 
 	dhcpc_init(&mac, 6);
	//telnetd_init();
 	httpd_init();
 
 	while(1) {
 		if (xSemaphoreTake(dmaSemaphore, 500 / portTICK_RATE_MS) == pdTRUE) {
             uip_len = uip_dma_rx_last_packet_length;
          	// packet received - buffer is already acquired
-			// uip_log("RX packet\r\n");
+			// uip_log("RX packet");
 		} else {
 		    uip_len = 0;
 		}
@@ -107,7 +106,7 @@
 					nic_rx_maybe();
 				}
 	   		} else {
-				uip_log("Unknown packet discarded\n");
+				uip_log("Unknown packet discarded");
 				nic_rx_maybe();
 			}
 	    } else if(timer_expired(&periodic_timer)) {
Index: src/uip/psock.c
===================================================================
--- src/uip/psock.c	(revision 612)
+++ src/uip/psock.c	(working copy)
@@ -225,7 +225,7 @@
 
   /* Call the generator function to generate the data in the
      uip_appdata buffer. */
-uip_log("Calling generator fn\n");
+uip_log("Calling generator fn");
   s->sendlen = generate(arg);
   s->sendptr = uip_appdata;
 
@@ -234,15 +234,15 @@
     /* Call the generator function again if we are called to perform a
        retransmission. */
     if(uip_rexmit()) {
-uip_log("rexmit:Calling generator fn\n");
+uip_log("rexmit:Calling generator fn");
       generate(arg);
     }
-sprintf(log_buf, "Waiting for data to be sent. sendlen=%d\r\n", s->sendlen);
+sprintf(log_buf, "Waiting for data to be sent. sendlen=%d", s->sendlen);
 uip_log(log_buf);
     /* Wait until all data is sent and acknowledged. */
     PT_WAIT_UNTIL(&s->psockpt, data_acked(s) & send_data(s));
   } while(s->sendlen > 0);
-  sprintf(log_buf, "Data sent. sendlen=%d\r\n", s->sendlen);
+  sprintf(log_buf, "Data sent. sendlen=%d", s->sendlen);
 	uip_log(log_buf);
   s->state = STATE_NONE;
   
@@ -314,7 +314,7 @@
   do {
     if(psock->readlen == 0) {
       PT_WAIT_UNTIL(&psock->psockpt, psock_newdata(psock));
-      uip_log("Waited for newdata\n");
+      uip_log("Waited for newdata");
       psock->state = STATE_READ;
       psock->readptr = (u8_t *)uip_appdata;
       psock->readlen = uip_datalen();
